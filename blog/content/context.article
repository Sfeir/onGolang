Golang Concurrency Patterns: Context
30 Nov 2015
Tags: pattern, context

Didier Girard
* Summary

Sameer Ajmani : "In Go servers, each incoming request is handled in its own goroutine. Request handlers often start additional goroutines to access backends such as databases and RPC services. The set of goroutines working on a request typically needs access to request-specific values such as the identity of the end user, authorization tokens, and the request's deadline. When a request is canceled or times out, all the goroutines working on that request should exit quickly so the system can reclaim any resources they are using."

Here is a list of useful links about Golang Context :

- [[http://blog.golang.org/context][Go Concurrency Patterns: Context]]
- [[http://blog.ralch.com/tutorial/golang-concurrency-patterns-context/][Concurrent patterns in Golang: Context]]
- [[https://godoc.org/golang.org/x/net/context][package context]]
